// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proxy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proxy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proxy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proxy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
class MsgData;
class MsgDataDefaultTypeInternal;
extern MsgDataDefaultTypeInternal _MsgData_default_instance_;
class ProxyMsg;
class ProxyMsgDefaultTypeInternal;
extern ProxyMsgDefaultTypeInternal _ProxyMsg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::MsgData* Arena::CreateMaybeMessage<::MsgData>(Arena*);
template<> ::ProxyMsg* Arena::CreateMaybeMessage<::ProxyMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ConnType : int {
  TCP = 0,
  UDP = 1,
  ConnType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConnType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConnType_IsValid(int value);
constexpr ConnType ConnType_MIN = TCP;
constexpr ConnType ConnType_MAX = UDP;
constexpr int ConnType_ARRAYSIZE = ConnType_MAX + 1;

const std::string& ConnType_Name(ConnType value);
template<typename T>
inline const std::string& ConnType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnType_Name.");
  return ConnType_Name(static_cast<ConnType>(enum_t_value));
}
bool ConnType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnType* value);
enum MsgType : int {
  CONNECT = 0,
  SEND = 1,
  RECV = 2,
  CLOSE = 3,
  ERROR = 4,
  CREATE = 5,
  RESULT = 6,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = CONNECT;
constexpr MsgType MsgType_MAX = RESULT;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const std::string& MsgType_Name(MsgType value);
template<typename T>
inline const std::string& MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgType_Name.");
  return MsgType_Name(static_cast<MsgType>(enum_t_value));
}
bool MsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgType* value);
// ===================================================================

class MsgData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:MsgData) */ {
 public:
  inline MsgData() : MsgData(nullptr) {}
  virtual ~MsgData();

  MsgData(const MsgData& from);
  MsgData(MsgData&& from) noexcept
    : MsgData() {
    *this = ::std::move(from);
  }

  inline MsgData& operator=(const MsgData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgData& operator=(MsgData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MsgData& default_instance();

  static inline const MsgData* internal_default_instance() {
    return reinterpret_cast<const MsgData*>(
               &_MsgData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgData& a, MsgData& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgData* New() const final {
    return CreateMaybeMessage<MsgData>(nullptr);
  }

  MsgData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MsgData& from);
  void MergeFrom(const MsgData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgData";
  }
  protected:
  explicit MsgData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArg3FieldNumber = 3,
    kArg4FieldNumber = 4,
    kArg1FieldNumber = 1,
    kArg2FieldNumber = 2,
  };
  // string arg3 = 3;
  void clear_arg3();
  const std::string& arg3() const;
  void set_arg3(const std::string& value);
  void set_arg3(std::string&& value);
  void set_arg3(const char* value);
  void set_arg3(const char* value, size_t size);
  std::string* mutable_arg3();
  std::string* release_arg3();
  void set_allocated_arg3(std::string* arg3);
  private:
  const std::string& _internal_arg3() const;
  void _internal_set_arg3(const std::string& value);
  std::string* _internal_mutable_arg3();
  public:

  // bytes arg4 = 4;
  void clear_arg4();
  const std::string& arg4() const;
  void set_arg4(const std::string& value);
  void set_arg4(std::string&& value);
  void set_arg4(const char* value);
  void set_arg4(const void* value, size_t size);
  std::string* mutable_arg4();
  std::string* release_arg4();
  void set_allocated_arg4(std::string* arg4);
  private:
  const std::string& _internal_arg4() const;
  void _internal_set_arg4(const std::string& value);
  std::string* _internal_mutable_arg4();
  public:

  // int32 arg1 = 1;
  void clear_arg1();
  ::PROTOBUF_NAMESPACE_ID::int32 arg1() const;
  void set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arg1() const;
  void _internal_set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 arg2 = 2;
  void clear_arg2();
  ::PROTOBUF_NAMESPACE_ID::int32 arg2() const;
  void set_arg2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arg2() const;
  void _internal_set_arg2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arg3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arg4_;
  ::PROTOBUF_NAMESPACE_ID::int32 arg1_;
  ::PROTOBUF_NAMESPACE_ID::int32 arg2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class ProxyMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ProxyMsg) */ {
 public:
  inline ProxyMsg() : ProxyMsg(nullptr) {}
  virtual ~ProxyMsg();

  ProxyMsg(const ProxyMsg& from);
  ProxyMsg(ProxyMsg&& from) noexcept
    : ProxyMsg() {
    *this = ::std::move(from);
  }

  inline ProxyMsg& operator=(const ProxyMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProxyMsg& operator=(ProxyMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ProxyMsg& default_instance();

  static inline const ProxyMsg* internal_default_instance() {
    return reinterpret_cast<const ProxyMsg*>(
               &_ProxyMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProxyMsg& a, ProxyMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ProxyMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProxyMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProxyMsg* New() const final {
    return CreateMaybeMessage<ProxyMsg>(nullptr);
  }

  ProxyMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProxyMsg>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProxyMsg& from);
  void MergeFrom(const ProxyMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProxyMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProxyMsg";
  }
  protected:
  explicit ProxyMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 6,
    kDataFieldNumber = 8,
    kMsgIdFieldNumber = 1,
    kAckIdFieldNumber = 2,
    kConnIdFieldNumber = 3,
    kConnTypeFieldNumber = 4,
    kMsgTypeFieldNumber = 5,
    kPortFieldNumber = 7,
  };
  // string ip = 6;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // .MsgData data = 8;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::MsgData& data() const;
  ::MsgData* release_data();
  ::MsgData* mutable_data();
  void set_allocated_data(::MsgData* data);
  private:
  const ::MsgData& _internal_data() const;
  ::MsgData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::MsgData* data);
  ::MsgData* unsafe_arena_release_data();

  // int32 msgId = 1;
  void clear_msgid();
  ::PROTOBUF_NAMESPACE_ID::int32 msgid() const;
  void set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgid() const;
  void _internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ackId = 2;
  void clear_ackid();
  ::PROTOBUF_NAMESPACE_ID::int32 ackid() const;
  void set_ackid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ackid() const;
  void _internal_set_ackid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 connId = 3;
  void clear_connid();
  ::PROTOBUF_NAMESPACE_ID::int32 connid() const;
  void set_connid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_connid() const;
  void _internal_set_connid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .ConnType connType = 4;
  void clear_conntype();
  ::ConnType conntype() const;
  void set_conntype(::ConnType value);
  private:
  ::ConnType _internal_conntype() const;
  void _internal_set_conntype(::ConnType value);
  public:

  // .MsgType msgType = 5;
  void clear_msgtype();
  ::MsgType msgtype() const;
  void set_msgtype(::MsgType value);
  private:
  ::MsgType _internal_msgtype() const;
  void _internal_set_msgtype(::MsgType value);
  public:

  // int32 port = 7;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProxyMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::MsgData* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ackid_;
  ::PROTOBUF_NAMESPACE_ID::int32 connid_;
  int conntype_;
  int msgtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgData

// int32 arg1 = 1;
inline void MsgData::clear_arg1() {
  arg1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgData::_internal_arg1() const {
  return arg1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgData::arg1() const {
  // @@protoc_insertion_point(field_get:MsgData.arg1)
  return _internal_arg1();
}
inline void MsgData::_internal_set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  arg1_ = value;
}
inline void MsgData::set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_arg1(value);
  // @@protoc_insertion_point(field_set:MsgData.arg1)
}

// int32 arg2 = 2;
inline void MsgData::clear_arg2() {
  arg2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgData::_internal_arg2() const {
  return arg2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgData::arg2() const {
  // @@protoc_insertion_point(field_get:MsgData.arg2)
  return _internal_arg2();
}
inline void MsgData::_internal_set_arg2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  arg2_ = value;
}
inline void MsgData::set_arg2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_arg2(value);
  // @@protoc_insertion_point(field_set:MsgData.arg2)
}

// string arg3 = 3;
inline void MsgData::clear_arg3() {
  arg3_.ClearToEmpty();
}
inline const std::string& MsgData::arg3() const {
  // @@protoc_insertion_point(field_get:MsgData.arg3)
  return _internal_arg3();
}
inline void MsgData::set_arg3(const std::string& value) {
  _internal_set_arg3(value);
  // @@protoc_insertion_point(field_set:MsgData.arg3)
}
inline std::string* MsgData::mutable_arg3() {
  // @@protoc_insertion_point(field_mutable:MsgData.arg3)
  return _internal_mutable_arg3();
}
inline const std::string& MsgData::_internal_arg3() const {
  return arg3_.Get();
}
inline void MsgData::_internal_set_arg3(const std::string& value) {
  
  arg3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgData::set_arg3(std::string&& value) {
  
  arg3_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgData.arg3)
}
inline void MsgData::set_arg3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  arg3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgData.arg3)
}
inline void MsgData::set_arg3(const char* value,
    size_t size) {
  
  arg3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgData.arg3)
}
inline std::string* MsgData::_internal_mutable_arg3() {
  
  return arg3_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgData::release_arg3() {
  // @@protoc_insertion_point(field_release:MsgData.arg3)
  return arg3_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgData::set_allocated_arg3(std::string* arg3) {
  if (arg3 != nullptr) {
    
  } else {
    
  }
  arg3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), arg3,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgData.arg3)
}

// bytes arg4 = 4;
inline void MsgData::clear_arg4() {
  arg4_.ClearToEmpty();
}
inline const std::string& MsgData::arg4() const {
  // @@protoc_insertion_point(field_get:MsgData.arg4)
  return _internal_arg4();
}
inline void MsgData::set_arg4(const std::string& value) {
  _internal_set_arg4(value);
  // @@protoc_insertion_point(field_set:MsgData.arg4)
}
inline std::string* MsgData::mutable_arg4() {
  // @@protoc_insertion_point(field_mutable:MsgData.arg4)
  return _internal_mutable_arg4();
}
inline const std::string& MsgData::_internal_arg4() const {
  return arg4_.Get();
}
inline void MsgData::_internal_set_arg4(const std::string& value) {
  
  arg4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgData::set_arg4(std::string&& value) {
  
  arg4_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgData.arg4)
}
inline void MsgData::set_arg4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  arg4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgData.arg4)
}
inline void MsgData::set_arg4(const void* value,
    size_t size) {
  
  arg4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgData.arg4)
}
inline std::string* MsgData::_internal_mutable_arg4() {
  
  return arg4_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgData::release_arg4() {
  // @@protoc_insertion_point(field_release:MsgData.arg4)
  return arg4_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgData::set_allocated_arg4(std::string* arg4) {
  if (arg4 != nullptr) {
    
  } else {
    
  }
  arg4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), arg4,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgData.arg4)
}

// -------------------------------------------------------------------

// ProxyMsg

// int32 msgId = 1;
inline void ProxyMsg::clear_msgid() {
  msgid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProxyMsg::_internal_msgid() const {
  return msgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProxyMsg::msgid() const {
  // @@protoc_insertion_point(field_get:ProxyMsg.msgId)
  return _internal_msgid();
}
inline void ProxyMsg::_internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msgid_ = value;
}
inline void ProxyMsg::set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:ProxyMsg.msgId)
}

// int32 ackId = 2;
inline void ProxyMsg::clear_ackid() {
  ackid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProxyMsg::_internal_ackid() const {
  return ackid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProxyMsg::ackid() const {
  // @@protoc_insertion_point(field_get:ProxyMsg.ackId)
  return _internal_ackid();
}
inline void ProxyMsg::_internal_set_ackid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ackid_ = value;
}
inline void ProxyMsg::set_ackid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ackid(value);
  // @@protoc_insertion_point(field_set:ProxyMsg.ackId)
}

// int32 connId = 3;
inline void ProxyMsg::clear_connid() {
  connid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProxyMsg::_internal_connid() const {
  return connid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProxyMsg::connid() const {
  // @@protoc_insertion_point(field_get:ProxyMsg.connId)
  return _internal_connid();
}
inline void ProxyMsg::_internal_set_connid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  connid_ = value;
}
inline void ProxyMsg::set_connid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_connid(value);
  // @@protoc_insertion_point(field_set:ProxyMsg.connId)
}

// .ConnType connType = 4;
inline void ProxyMsg::clear_conntype() {
  conntype_ = 0;
}
inline ::ConnType ProxyMsg::_internal_conntype() const {
  return static_cast< ::ConnType >(conntype_);
}
inline ::ConnType ProxyMsg::conntype() const {
  // @@protoc_insertion_point(field_get:ProxyMsg.connType)
  return _internal_conntype();
}
inline void ProxyMsg::_internal_set_conntype(::ConnType value) {
  
  conntype_ = value;
}
inline void ProxyMsg::set_conntype(::ConnType value) {
  _internal_set_conntype(value);
  // @@protoc_insertion_point(field_set:ProxyMsg.connType)
}

// .MsgType msgType = 5;
inline void ProxyMsg::clear_msgtype() {
  msgtype_ = 0;
}
inline ::MsgType ProxyMsg::_internal_msgtype() const {
  return static_cast< ::MsgType >(msgtype_);
}
inline ::MsgType ProxyMsg::msgtype() const {
  // @@protoc_insertion_point(field_get:ProxyMsg.msgType)
  return _internal_msgtype();
}
inline void ProxyMsg::_internal_set_msgtype(::MsgType value) {
  
  msgtype_ = value;
}
inline void ProxyMsg::set_msgtype(::MsgType value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:ProxyMsg.msgType)
}

// string ip = 6;
inline void ProxyMsg::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& ProxyMsg::ip() const {
  // @@protoc_insertion_point(field_get:ProxyMsg.ip)
  return _internal_ip();
}
inline void ProxyMsg::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:ProxyMsg.ip)
}
inline std::string* ProxyMsg::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:ProxyMsg.ip)
  return _internal_mutable_ip();
}
inline const std::string& ProxyMsg::_internal_ip() const {
  return ip_.Get();
}
inline void ProxyMsg::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProxyMsg::set_ip(std::string&& value) {
  
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProxyMsg.ip)
}
inline void ProxyMsg::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProxyMsg.ip)
}
inline void ProxyMsg::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProxyMsg.ip)
}
inline std::string* ProxyMsg::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProxyMsg::release_ip() {
  // @@protoc_insertion_point(field_release:ProxyMsg.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProxyMsg::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProxyMsg.ip)
}

// int32 port = 7;
inline void ProxyMsg::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProxyMsg::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProxyMsg::port() const {
  // @@protoc_insertion_point(field_get:ProxyMsg.port)
  return _internal_port();
}
inline void ProxyMsg::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void ProxyMsg::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:ProxyMsg.port)
}

// .MsgData data = 8;
inline bool ProxyMsg::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ProxyMsg::has_data() const {
  return _internal_has_data();
}
inline void ProxyMsg::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::MsgData& ProxyMsg::_internal_data() const {
  const ::MsgData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::MsgData&>(
      ::_MsgData_default_instance_);
}
inline const ::MsgData& ProxyMsg::data() const {
  // @@protoc_insertion_point(field_get:ProxyMsg.data)
  return _internal_data();
}
inline void ProxyMsg::unsafe_arena_set_allocated_data(
    ::MsgData* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProxyMsg.data)
}
inline ::MsgData* ProxyMsg::release_data() {
  
  ::MsgData* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MsgData* ProxyMsg::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:ProxyMsg.data)
  
  ::MsgData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::MsgData* ProxyMsg::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::MsgData>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::MsgData* ProxyMsg::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ProxyMsg.data)
  return _internal_mutable_data();
}
inline void ProxyMsg::set_allocated_data(::MsgData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:ProxyMsg.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ConnType> : ::std::true_type {};
template <> struct is_proto_enum< ::MsgType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proxy_2eproto
